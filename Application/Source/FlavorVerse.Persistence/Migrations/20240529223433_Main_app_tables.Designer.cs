// <auto-generated />
using System;
using FlavorVerse.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlavorVerse.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240529223433_Main_app_tables")]
    partial class Main_app_tables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("DetailsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("ExecutedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ExecutionTimeInMs")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("EntityTypeId");

                    b.HasIndex("ExecutedById");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Main Courses"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Appetizers"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Salads"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Desserts"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Seafood",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Pasta",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Soup",
                            ParentId = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "Dips",
                            ParentId = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Greek Salad",
                            ParentId = 3
                        },
                        new
                        {
                            Id = 10,
                            Name = "Fruit Salad",
                            ParentId = 3
                        },
                        new
                        {
                            Id = 11,
                            Name = "Cakes",
                            ParentId = 4
                        },
                        new
                        {
                            Id = 12,
                            Name = "Cookies",
                            ParentId = 4
                        },
                        new
                        {
                            Id = 13,
                            Name = "Grilled",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 14,
                            Name = "Stir Fry",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 15,
                            Name = "Sandwiches",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 16,
                            Name = "Stews",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 17,
                            Name = "Burgers",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 18,
                            Name = "Barbecue",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 19,
                            Name = "Pizza",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 20,
                            Name = "Wraps",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 21,
                            Name = "Finger Foods",
                            ParentId = 2
                        },
                        new
                        {
                            Id = 22,
                            Name = "Spring Rolls",
                            ParentId = 2
                        },
                        new
                        {
                            Id = 23,
                            Name = "Mixed Greens",
                            ParentId = 3
                        },
                        new
                        {
                            Id = 24,
                            Name = "Coleslaw",
                            ParentId = 3
                        },
                        new
                        {
                            Id = 25,
                            Name = "Mousse",
                            ParentId = 4
                        },
                        new
                        {
                            Id = 26,
                            Name = "Pies",
                            ParentId = 4
                        });
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.Cuisine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cuisines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Famous for pasta, pizza, and rich sauces.",
                            Image = "https://flagsapi.com/IT/flat/64.png",
                            Name = "Italian"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Known for noodles, dumplings, and diverse flavors.",
                            Image = "https://flagsapi.com/CN/flat/64.png",
                            Name = "Chinese"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Popular for tacos, burritos, and spicy dishes.",
                            Image = "https://flagsapi.com/MX/flat/64.png",
                            Name = "Mexican"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Renowned for sushi, ramen, and tempura.",
                            Image = "https://flagsapi.com/JP/flat/64.png",
                            Name = "Japanese"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Known for curries, spices, and diverse vegetarian dishes.",
                            Image = "https://flagsapi.com/IN/flat/64.png",
                            Name = "Indian"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Famous for pastries, wine, and sophisticated flavors.",
                            Image = "https://flagsapi.com/FR/flat/64.png",
                            Name = "French"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Known for its spicy curries and vibrant flavors.",
                            Image = "https://flagsapi.com/TH/flat/64.png",
                            Name = "Thai"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Popular for tapas, paella, and rich traditions.",
                            Image = "https://flagsapi.com/ES/flat/64.png",
                            Name = "Spanish"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Famous for gyros, olives, and feta cheese.",
                            Image = "https://flagsapi.com/GR/flat/64.png",
                            Name = "Greek"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Known for meze, kebabs, and fresh salads.",
                            Image = "https://flagsapi.com/LB/flat/64.png",
                            Name = "Lebanese"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Famous for kebabs, baklava, and strong coffee.",
                            Image = "https://flagsapi.com/TR/flat/64.png",
                            Name = "Turkish"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Popular for kimchi, BBQ, and vibrant dishes.",
                            Image = "https://flagsapi.com/KR/flat/64.png",
                            Name = "Korean"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Known for churrasco, feijoada, and tropical flavors.",
                            Image = "https://flagsapi.com/BR/flat/64.png",
                            Name = "Brazilian"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Famous for tagines, couscous, and rich spices.",
                            Image = "https://flagsapi.com/MA/flat/64.png",
                            Name = "Moroccan"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Known for pho, fresh herbs, and light dishes.",
                            Image = "https://flagsapi.com/VN/flat/64.png",
                            Name = "Vietnamese"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Popular for injera, stews, and communal eating.",
                            Image = "https://flagsapi.com/ET/flat/64.png",
                            Name = "Ethiopian"
                        });
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.DietaryInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("DairyFree")
                        .HasColumnType("bit");

                    b.Property<bool>("GlutenFree")
                        .HasColumnType("bit");

                    b.Property<bool>("Vegan")
                        .HasColumnType("bit");

                    b.Property<bool>("Vegetarian")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("DietaryInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DairyFree = false,
                            GlutenFree = false,
                            Vegan = false,
                            Vegetarian = false
                        },
                        new
                        {
                            Id = 2,
                            DairyFree = false,
                            GlutenFree = false,
                            Vegan = true,
                            Vegetarian = false
                        },
                        new
                        {
                            Id = 3,
                            DairyFree = false,
                            GlutenFree = false,
                            Vegan = false,
                            Vegetarian = true
                        },
                        new
                        {
                            Id = 4,
                            DairyFree = false,
                            GlutenFree = false,
                            Vegan = true,
                            Vegetarian = true
                        },
                        new
                        {
                            Id = 5,
                            DairyFree = true,
                            GlutenFree = false,
                            Vegan = false,
                            Vegetarian = false
                        },
                        new
                        {
                            Id = 6,
                            DairyFree = true,
                            GlutenFree = false,
                            Vegan = true,
                            Vegetarian = false
                        },
                        new
                        {
                            Id = 7,
                            DairyFree = true,
                            GlutenFree = false,
                            Vegan = false,
                            Vegetarian = true
                        },
                        new
                        {
                            Id = 8,
                            DairyFree = true,
                            GlutenFree = false,
                            Vegan = true,
                            Vegetarian = true
                        },
                        new
                        {
                            Id = 9,
                            DairyFree = false,
                            GlutenFree = true,
                            Vegan = false,
                            Vegetarian = false
                        },
                        new
                        {
                            Id = 10,
                            DairyFree = false,
                            GlutenFree = true,
                            Vegan = true,
                            Vegetarian = false
                        },
                        new
                        {
                            Id = 11,
                            DairyFree = false,
                            GlutenFree = true,
                            Vegan = false,
                            Vegetarian = true
                        },
                        new
                        {
                            Id = 12,
                            DairyFree = false,
                            GlutenFree = true,
                            Vegan = true,
                            Vegetarian = true
                        },
                        new
                        {
                            Id = 13,
                            DairyFree = true,
                            GlutenFree = true,
                            Vegan = false,
                            Vegetarian = false
                        },
                        new
                        {
                            Id = 14,
                            DairyFree = true,
                            GlutenFree = true,
                            Vegan = true,
                            Vegetarian = false
                        },
                        new
                        {
                            Id = 15,
                            DairyFree = true,
                            GlutenFree = true,
                            Vegan = false,
                            Vegetarian = true
                        },
                        new
                        {
                            Id = 16,
                            DairyFree = true,
                            GlutenFree = true,
                            Vegan = true,
                            Vegetarian = true
                        });
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.ErrorLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Flour"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sugar"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Salt"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pepper"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Olive Oil"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Butter"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Garlic"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Onion"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Tomato"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Lemon Juice"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Chicken Breast"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Beef Steak"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Salmon Fillet"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Shrimp"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Eggs"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Milk"
                        });
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.Nutrition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Calories")
                        .HasColumnType("int");

                    b.Property<int?>("Carbohydrates")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Fat")
                        .HasColumnType("int");

                    b.Property<int?>("Fiber")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Protein")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Nutritions");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CookingTime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DietaryInfoId")
                        .HasColumnType("int");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<bool>("Featured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("MealTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NutritionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Servings")
                        .HasColumnType("int");

                    b.Property<string>("Titile")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DietaryInfoId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("MealTypeId");

                    b.HasIndex("NutritionId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.RecipeCategory", b =>
                {
                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("RecipeId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("RecipeCategories");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.RecipeCuisine", b =>
                {
                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CuisineId")
                        .HasColumnType("int");

                    b.HasKey("RecipeId", "CuisineId");

                    b.HasIndex("CuisineId");

                    b.ToTable("RecipeCuisines");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.RecipeIngredient", b =>
                {
                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("RecipeId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("RecipeIngredients");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.SignInLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SignInLogs");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComputedColumnSql("[FirstName] + ' ' + [LastName]");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 5, 29, 22, 34, 33, 571, DateTimeKind.Utc).AddTicks(5341),
                            DateOfBirth = new DateOnly(2002, 10, 10),
                            DisplayName = "",
                            Email = "system@dmin.test",
                            FirstName = "Obrad",
                            IsActive = false,
                            LastName = "Pualić-Radujko",
                            Password = "$2a$11$NKxXBpu0i9OFP5bAasS4ReP/d3F/UxDvA..frIy.AYvIyYTNG9QRC",
                            Phone = ""
                        });
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application_lu.ActionType_lu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ActionTypes_lu");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Insert"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Update"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application_lu.DifficultyCooking_lu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DifficultyCookings_lu");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Easy"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hard"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Expert"
                        });
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application_lu.EntityType_lu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("EntityTypes_lu");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Nutrition"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rating"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Recipe"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cuisine"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Ingredient"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Category"
                        });
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application_lu.MealType_lu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MealTypes_lu");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Breakfast"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Lunch"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dinner"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Snack"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Dessert"
                        });
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application_lu.Role_lu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles_lu");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Member"
                        });
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.Audit", b =>
                {
                    b.HasOne("FlavorVerse.Domain.Entities.Application_lu.ActionType_lu", "ActionType")
                        .WithMany("Audits")
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlavorVerse.Domain.Entities.Application_lu.EntityType_lu", "EntityType")
                        .WithMany("Audits")
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlavorVerse.Domain.Entities.Application.User", "User")
                        .WithMany("Audits")
                        .HasForeignKey("ExecutedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActionType");

                    b.Navigation("EntityType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.Category", b =>
                {
                    b.HasOne("FlavorVerse.Domain.Entities.Application.Category", "Parent")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.Rating", b =>
                {
                    b.HasOne("FlavorVerse.Domain.Entities.Application.Recipe", "Recipe")
                        .WithMany("Ratings")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlavorVerse.Domain.Entities.Application.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.Recipe", b =>
                {
                    b.HasOne("FlavorVerse.Domain.Entities.Application.DietaryInfo", "DietaryInfo")
                        .WithMany("Recipes")
                        .HasForeignKey("DietaryInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlavorVerse.Domain.Entities.Application_lu.DifficultyCooking_lu", "DifficultyCooking_Lu")
                        .WithMany("Recipes")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlavorVerse.Domain.Entities.Application_lu.MealType_lu", "MealType_Lu")
                        .WithMany("Recipes")
                        .HasForeignKey("MealTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlavorVerse.Domain.Entities.Application.Nutrition", "Nutrition")
                        .WithMany("Recipes")
                        .HasForeignKey("NutritionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlavorVerse.Domain.Entities.Application.User", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DietaryInfo");

                    b.Navigation("DifficultyCooking_Lu");

                    b.Navigation("MealType_Lu");

                    b.Navigation("Nutrition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.RecipeCategory", b =>
                {
                    b.HasOne("FlavorVerse.Domain.Entities.Application.Category", "Category")
                        .WithMany("RecipeCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlavorVerse.Domain.Entities.Application.Recipe", "Recipe")
                        .WithMany("RecipeCategories")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.RecipeCuisine", b =>
                {
                    b.HasOne("FlavorVerse.Domain.Entities.Application.Cuisine", "Cuisine")
                        .WithMany("RecipeCusines")
                        .HasForeignKey("CuisineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlavorVerse.Domain.Entities.Application.Recipe", "Recipe")
                        .WithMany("RecipeCusines")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cuisine");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.RecipeIngredient", b =>
                {
                    b.HasOne("FlavorVerse.Domain.Entities.Application.Ingredient", "Ingredient")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlavorVerse.Domain.Entities.Application.Recipe", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.SignInLog", b =>
                {
                    b.HasOne("FlavorVerse.Domain.Entities.Application.User", "User")
                        .WithMany("SignInLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.UserRole", b =>
                {
                    b.HasOne("FlavorVerse.Domain.Entities.Application_lu.Role_lu", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlavorVerse.Domain.Entities.Application.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.Category", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("RecipeCategories");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.Cuisine", b =>
                {
                    b.Navigation("RecipeCusines");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.DietaryInfo", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.Ingredient", b =>
                {
                    b.Navigation("RecipeIngredients");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.Nutrition", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.Recipe", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("RecipeCategories");

                    b.Navigation("RecipeCusines");

                    b.Navigation("RecipeIngredients");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application.User", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Ratings");

                    b.Navigation("Recipes");

                    b.Navigation("SignInLogs");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application_lu.ActionType_lu", b =>
                {
                    b.Navigation("Audits");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application_lu.DifficultyCooking_lu", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application_lu.EntityType_lu", b =>
                {
                    b.Navigation("Audits");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application_lu.MealType_lu", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("FlavorVerse.Domain.Entities.Application_lu.Role_lu", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
